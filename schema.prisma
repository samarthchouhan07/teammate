generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Profile {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @unique
  name     String?
  imageUrl String
  email    String

  servers  Server[]  @relation("ProfileToServer")
  members  Member[]  @relation("ProfileToMember")
  channels Channel[] @relation("ProfileToChannel")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  inviteCode String

  profileId String   @db.ObjectId
  profile   Profile  @relation("ProfileToServer", fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]  @relation("ServerToMember")
  channels Channel[] @relation("ServerToChannel")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  role      MemberRole @default(GUEST)
  
  profileId String     @db.ObjectId
  profile   Profile    @relation("ProfileToMember", fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String     @db.ObjectId
  server    Server     @relation("ServerToMember", fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type ChannelType @default(TEXT)

  profileId String  @db.ObjectId
  profile   Profile @relation("ProfileToChannel", fields: [profileId], references: [id], onDelete: Cascade)

  serverId String  @db.ObjectId
  server   Server  @relation("ServerToChannel", fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}